/*
 * ----------------------------------------------------------------
 * --- WARNING: THIS FILE IS GENERATED AND WILL BE OVERWRITTEN!
 * --- Generated at $currentDateTime
 * ----------------------------------------------------------------
 *
 * [y] hybris Platform
 * 
 * Copyright (c) 2000-2016 SAP SE
 * All rights reserved.
 * 
 * This software is the confidential and proprietary information of SAP 
 * Hybris ("Confidential Information"). You shall not disclose such 
 * Confidential Information and shall use it only in accordance with the 
 * terms of the license agreement you entered into with SAP Hybris.
 */
package $packageName;

#foreach($i in $imports)
import $i;
#end
#if ( ! $imports.isEmpty() )


#end
#if ( $hasDescription || $hasDeprecated )
/**
#end
#if ( $hasDescription)
 * $description
#end
#if ( $hasDescription && $hasDeprecated )
 *
#end
#if ( $hasDeprecated )
 * @deprecated $deprecated
#end
#if ( $hasDescription || $hasDeprecated )
 */
#end
#if ( $hasAnnotations )
$annotations.trim()
#end
#if ( $hasDeprecated )
@Deprecated
#end
public #if ($isAbstract)abstract #end class $shortClassName #if($superclassName)extends $superclassName #else implements java.io.Serializable #end

{

#foreach($v in $memberVariables)

	$v.comment
	#if ("$!v.memberAnnotations" != "")$v.memberAnnotations.trim() #end
	
	private $v.type $v.name;
#end
	
	public ${constructorName}()
	{
		// default constructor
	}
	
#foreach($v in $memberVariables)
	#if ($v.deprecated)@Deprecated
    /**
     * @deprecated $v.deprecatedMessage
     */
	#end
	#if ($v.overridden)@Override #end

	#if ("$!v.setterAnnotations" != "")$v.setterAnnotations.trim() #end

	public void set${StringUtils.capitalize($v.name)}(final ${v.type} ${v.name})
	{
		this.${v.name} = ${v.name};
	}

	#if ($v.deprecated)@Deprecated
	/**
	 * @deprecated $v.deprecatedMessage
	 */
	#end
	#if ($v.overridden)@Override #end

	#if ("$!v.getterAnnotations" != "")$v.getterAnnotations.trim() #end

#if ($v.type == 'boolean')	
	public $v.type is${StringUtils.capitalize($v.name)}() 
	{
		return $v.name;
	}
#else
	public $v.type get${StringUtils.capitalize($v.name)}() 
	{
		return $v.name;
	}
#end
	
#end

#if ($hasEqualsProperties)
	@Override
	public boolean equals(final Object o)
	{
#if ($superEquals)
		boolean superEquals = super.equals(o);
		if( !superEquals ) return false;
#end

		if (o == null || !this.getClass().equals(o.getClass())) {
          return false;
        } else if (o == this) {
          return true;
        }
       
		final $shortClassName other = ($shortClassName) o;
		return new org.apache.commons.lang.builder.EqualsBuilder()
#foreach($v in $equalsProperties)
#if ($v.type == 'boolean')
		.append(is${StringUtils.capitalize($v.name)}(), other.is${StringUtils.capitalize($v.name)}())
#else
		.append(get${StringUtils.capitalize($v.name)}(), other.get${StringUtils.capitalize($v.name)}()) 
#end
#end
		.isEquals();
	}
	
	@Override
	public int hashCode()
	{
		return new org.apache.commons.lang.builder.HashCodeBuilder()
#if ($superEquals)
		.appendSuper(super.hashCode())
#end
#foreach($v in $equalsProperties)
#if ($v.type == 'boolean')
		.append(is${StringUtils.capitalize($v.name)}())
#else
		.append(get${StringUtils.capitalize($v.name)}()) 
#end
#end
		.toHashCode();
	}
#end
	/**
	 * Determines whether the given rule (identified by its config object) is allowed to be executed. When the already triggered rule
	 * gets triggered again, it is allowed to be executed as many times as specified by the rules 'maximum allowed executions' attribute.
	 */
	public boolean allowedToExecute(final RuleConfigurationRRD ruleConfig)
	{
		if (this.executedRules == null)
		{
			// first execution of the group
			return true;
		}
		else
		{
			if (this.executedRules.entrySet().isEmpty())
			{
				// first execution of the group
				return true;
			}
			else
			{
				// unless this rule has been triggered already and has more than 1 executions allowed
				final Integer current = this.executedRules.get(ruleConfig.getRuleCode());
				if (current == null)
				{
					if (isExclusive())
					{
						// if a rule from the exclusive rule group already triggered but not for this rule
						return false;
					}
					else
					{
						// this rule hasn't been yet tracked
						return true;
					}
				}
				Integer max = ruleConfig.getMaxAllowedRuns();
				if (max == null)
				{
					max = Integer.valueOf(1);
				}
				return current.compareTo(max) < 0;
			}
		}
	}
	
	public void trackRuleGroupExecution(final RuleConfigurationRRD ruleConfig)
	{
		if (ruleConfig.isActionExecutionStarted())
		{
			final String ruleCode = ruleConfig.getRuleCode();
			if (this.getExecutedRules() == null)
			{
				java.util.Map<String, Integer> executedRules = new java.util.LinkedHashMap<>();
				executedRules.put(ruleCode, 1);
				this.setExecutedRules(executedRules);
			}
			else
			{
				final Integer ruleCount = this.getExecutedRules().containsKey(ruleCode) ? (this.getExecutedRules().get(ruleCode).intValue() + 1) : 1;
				this.getExecutedRules().put(ruleCode, ruleCount);
			}
		}
	}
}

/*
 * [y] hybris Platform
 *
 * Copyright (c) 2018 SAP SE or an SAP affiliate company.  All rights reserved.
 *
 * This software is the confidential and proprietary information of SAP
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with SAP.
 */
package com.hybris.cis.client.payment.models;

import com.hybris.cis.client.shared.models.CisAddress;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;


/**
 * A payment request to authorize an amount of money based on the tokens generated by a previous request.
 */
@XmlRootElement(name = "tokenizedPaymentAuthorization")
@XmlAccessorType(XmlAccessType.FIELD)
public class CisTokenizedPaymentAuthorization extends CisPaymentAuthorization
{
	/** Timestamped token by which you identify to third party. */
	@XmlElement(name = "paymentToken")
	private String paymentToken;

	/**
	 * Unique PayPal customer account identification number that was returned in the payPalEcGetDetailsService reply
	 * message.
	 */
	@XmlElement(name = "payerId")
	private String payerId;

	/** Value of requestId returned from a previous request. */
	@XmlElement(name = "requestId")
	private String requestId;

	/**
	 * Request token returned from a previous request.
	 * The field is an encoded string that contains no confidential information, such as an account number or card
	 * verification number. The string can contain up to 256 characters.
	 */
	@XmlElement(name = "requestToken")
	private String requestToken;

	/**
	 * Email address of the buyer as entered during checkout. PayPal uses this value to pre-fill the PayPal membership
	 * sign-up portion of the PayPal login page.
	 */
	@XmlElement(name = "customerEmail")
	private String customerEmail;

	/** The billing address. */
	@XmlElement(name = "address")
	private CisAddress address;


	public CisTokenizedPaymentAuthorization()
	{
		super();
	}

	public CisTokenizedPaymentAuthorization(final String clientAuthorizationId)
	{
		super(clientAuthorizationId);
	}

	public String getPaymentToken()
	{
		return this.paymentToken;
	}

	public void setPaymentToken(final String paymentToken)
	{
		this.paymentToken = paymentToken;
	}

	public String getPayerId()
	{
		return this.payerId;
	}

	public void setPayerId(final String payerId)
	{
		this.payerId = payerId;
	}

	public String getRequestId()
	{
		return this.requestId;
	}

	public void setRequestId(final String requestId)
	{
		this.requestId = requestId;
	}

	public String getRequestToken()
	{
		return this.requestToken;
	}

	public void setRequestToken(final String requestToken)
	{
		this.requestToken = requestToken;
	}

	public String getCustomerEmail()
	{
		return this.customerEmail;
	}

	public void setCustomerEmail(final String customerEmail)
	{
		this.customerEmail = customerEmail;
	}

	public CisAddress getAddress()
	{
		return this.address;
	}

	public void setAddress(final CisAddress address)
	{
		this.address = address;
	}

	@Override
	public String toString()
	{
		return "CisTokenizedPaymentAuthorization [clientAuthorizationId=" + this.getClientAuthorizationId() + ", amount="
				+ this.getAmount() + ", currency=" + this.getCurrency() + ", paymentToken=" + this.paymentToken + ", payerId="
				+ this.payerId + ", requestId=" + this.requestId + ", requestToken=" + this.requestToken + ", customerEmail="
				+ this.customerEmail + ", address=" + this.address + "]";
	}
}

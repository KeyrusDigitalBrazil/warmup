/*
 * [y] hybris Platform
 *
 * Copyright (c) 2018 SAP SE or an SAP affiliate company.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of SAP
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with SAP.
 */

package de.hybris.platform.odata2services.odata.schema.entity

import de.hybris.bootstrap.annotations.UnitTest
import de.hybris.platform.integrationservices.model.IntegrationObjectItemModel
import de.hybris.platform.integrationservices.model.MockItemAttributeModelBuilder
import de.hybris.platform.odata2services.TestConstants
import de.hybris.platform.odata2services.odata.schema.KeyGenerator
import de.hybris.platform.odata2services.odata.schema.property.AbstractPropertyListGenerator
import org.apache.olingo.odata2.api.edm.provider.Key
import org.apache.olingo.odata2.api.edm.provider.Property
import org.junit.Test
import spock.lang.Specification

import static de.hybris.platform.integrationservices.model.BaseMockAttributeDescriptorModelBuilder.attributeDescriptor
import static de.hybris.platform.integrationservices.model.BaseMockItemAttributeModelBuilder.*
import static de.hybris.platform.integrationservices.model.MockIntegrationObjectItemModelBuilder.itemModelBuilder

@UnitTest
class LocalizedEntityTypeGeneratorUnitTest extends Specification {
    AbstractPropertyListGenerator propertiesGenerator = Stub(AbstractPropertyListGenerator)
    KeyGenerator keyGenerator = Stub(KeyGenerator)
    def generator = new LocalizedEntityTypeGenerator()

    def setup() {
        generator.propertiesGenerator = propertiesGenerator
        generator.keyGenerator = keyGenerator
    }

    @Test
    def "does not generate entity type when no localized attributes present in the item"() {
        given: "item does not contain localized attributes"
        def item = itemModelBuilder()
                .withCode("NotLocalizedItem")
                .withAttribute(simpleAttributeBuilder())
                .withAttribute(collectionAttributeBuilder())
                .withAttribute(oneToOneRelationAttributeBuilder())
                .withAttribute(complexRelationAttributeBuilder())
                .build()

        when: "generation is called for the item"
        def types = generator.generate(item)

        then: "no entity types generated"
        types.isEmpty()
    }

    @Test
    def "generates entity type when at least one localized attribute is present in the item"() {
        propertiesGenerator.generate(_ as IntegrationObjectItemModel) >> { [] }
        keyGenerator.generate(_ as List) >> { Optional.of new Key() }

        given: "item contains at least one localized attribute"
        def item = itemModelBuilder()
                .withCode("ItemType")
                .withAttribute(simpleAttributeBuilder())
                .withAttribute(collectionAttributeBuilder())
                .withAttribute(oneToOneRelationAttributeBuilder())
                .withAttribute(complexRelationAttributeBuilder())
                .withAttribute(localizedAttributeBuilder())
                .build()

        when: "generation is called for the item"
        def types = generator.generate(item)

        then: "the localized entity type is generated"
        types.size() == 1
        types[0].name == "${TestConstants.LOCALIZED_ENTITY_PREFIX}ItemType"
    }

    @Test
    def "generated localized entity type contains all properties generated by the properties generator"() {
        keyGenerator.generate(_ as List) >> { Optional.of(new Key()) }
        def item = itemModelBuilder().withAttribute(localizedAttributeBuilder()).build()

        given: "properties generator generates some properties"
        def properties = propertiesGeneratedForItem(item, property("localizedOne"), property("localizedTwo"), property("language"))

        when: "generation is called for the item"
        def types = generator.generate(item)

        then: "the generated entity type contains all the generated properties"
        types.get(0).getProperties() == properties
    }

    @Test
    def "generated localized entity type contains key generated by the key generator"() {
        def item = itemModelBuilder().withAttribute(localizedAttributeBuilder()).build()
        def properties = propertiesGeneratedForItem(item)

        given: "key generator generates a key"
        Optional<Key> key = keyGenerated(properties)

        when: "generation is called for the item"
        def types = generator.generate(item)

        then: "the generated entity type contains the generated key"
        types.get(0).getKey() == key.orElseThrow({new IllegalStateException("Stubbing is done incorrectly for the test")})
    }

    @Test
    def "does not crash when entity type key is not generated"() {
        propertiesGenerator.generate(_ as IntegrationObjectItemModel) >> { [] }
        def item = itemModelBuilder().withAttribute(localizedAttributeBuilder()).withCode("Item").build()

        given: "key generator generates no key"
        keyGenerator.generate(_ as List) >> { Optional.empty() }

        when: "generation is called for the item"
        def types = generator.generate(item)

        then: "then the generated entity type has no key"
        types.get(0).key == null
    }

    private Optional<Key> keyGenerated(List<Property> propeties) {
        final Optional<Key> key = Optional.of new Key()
        keyGenerator.generate(propeties) >> { key }
        key
    }

    private List<Property> propertiesGeneratedForItem(IntegrationObjectItemModel item, Property... properties) {
        List<Property> list = Arrays.asList(properties)
        propertiesGenerator.generate(item) >> { list }
        list
    }

    def property(final String name) {
        Stub(Property) { getName() >> name }
    }

    private static MockItemAttributeModelBuilder localizedAttributeBuilder() {
        simpleAttributeBuilder().withAttributeDescriptor(
                attributeDescriptor().withLocalized(true))
    }
}

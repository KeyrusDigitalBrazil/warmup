/*
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 *
 */
package $packageName;

#foreach($i in $imports)
import $i;
#end
#if ( ! $imports.isEmpty() )

#end
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

#if ( $hasDescription || $hasDeprecated )
/**
#end
#if ( $hasDescription)
 * $description
#end
#if ( $hasDescription && $hasDeprecated )
 *
#end
#if ( $hasDeprecated )
 * @deprecated $deprecated
#end
#if ( $hasDescription || $hasDeprecated )
 */
#end
#if ( $hasDeprecated )
@Deprecated
#end
public class $shortClassName #if($superclassName)extends $superclassName #else implements java.io.Serializable #end
{

#foreach($v in $memberVariables)
	$v.comment
	private $v.type $v.name;
#end
	
	public ${constructorName}()
	{
		// default constructor
	}
	
#foreach($v in $memberVariables)

#if ($v.overridden)@Override#end	
	public void set${StringUtils.capitalize($v.name)}(final ${v.type} ${v.name})
	{
		this.${v.name} = ${v.name};
	}
	
#if ($v.overridden)@Override#end
#if ($v.type == 'boolean')	
	public $v.type is${StringUtils.capitalize($v.name)}() 
	{
		return $v.name;
	}
#else
	public $v.type get${StringUtils.capitalize($v.name)}() 
	{
		return $v.name;
	}
#end
#end
	

	@Override
	public String toString()
	{
		return new ToStringBuilder(this)
#foreach($v in $memberVariables)
			.append("$v.name", $v.name)
#end
			.toString();
	}

 	@Override
   public boolean equals(Object obj)
	{
		if (obj == null || !this.getClass().equals(obj.getClass())) {
      	return false;
      } else if (obj == this) {
      	return true;
      }
      $shortClassName other = ($shortClassName)obj;
      return new EqualsBuilder()
#foreach($v in $memberVariables)
#if ($v.name != 'assignedValues' && $v.name != 'assignableValues' && $v.name != 'cstics')	
			.append($v.name, other.$v.name)
#end 
#end 
         .isEquals();
   }
    	
	@Override
	public int hashCode()
	{
		return new HashCodeBuilder()
#foreach($v in $memberVariables)
#if ($v.name != 'assignedValues' && $v.name != 'assignableValues' && $v.name != 'cstics' )
			.append($v.name)
#end
#end 
			.toHashCode();
	}
}
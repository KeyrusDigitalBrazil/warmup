/*
 * [y] hybris Platform
 *
 * Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved.
 *
 * This software is the confidential and proprietary information of SAP
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with SAP.
 */
package de.hybris.platform.sap.core.jco.rec.version100;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;


/**
 * This class provides a generic way of overriding the toString method.<br/>
 * Every class generated by JAXB uses this class as superclass, therefore an optimized, more informative toString method
 * is provided for every generated class.
 */
@javax.xml.bind.annotation.XmlTransient
public class SuperToString
{
	/**
	 * Logger.
	 */
	private static final Logger LOG = Logger.getLogger(SuperToString.class.getName());

	@Override
	public String toString()
	{
		final StringBuilder result = new StringBuilder();
		String s = super.toString();
		s = s.substring(s.lastIndexOf(".") + 1, s.length());
		result.append(s).append(" : ");
		final Field[] ownAndInheritedFields = getOwnAndInheritedFields(this.getClass());
		for (final Field f : ownAndInheritedFields)
		{
			if (f.isAccessible())
			{
				try
				{
					result.append("[").append(f.get(this)).append("] ");
				}
				catch (IllegalArgumentException | IllegalAccessException e)
				{
					LOG.error(e);
					continue;
				}
			}
		}

		return result.toString();
	}

	/**
	 * Collects the fields in the class itself as well as the fields from all super classes of the given class.
	 * 
	 * @param clazz
	 *           the current class.
	 * @return Returns an array of all fields of the given class.
	 */
	private Field[] getOwnAndInheritedFields(final Class<? extends SuperToString> clazz)
	{
		final List<Field> all = new ArrayList<Field>();

		// collect all fields from the given class
		for (final Field f : clazz.getDeclaredFields())
		{
			all.add(f);
		}

		// collect all fields from every superclass of the given class
		Class<?> supa = clazz.getSuperclass();
		while (supa != null && supa != SuperToString.class)
		{
			for (final Field f : supa.getDeclaredFields())
			{
				all.add(f);
			}
			supa = supa.getSuperclass();
		}

		return all.toArray(new Field[] {});
	}
}

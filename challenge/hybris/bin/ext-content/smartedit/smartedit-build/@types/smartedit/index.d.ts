import * as angular from 'angular';
declare module 'smartedit' {
// ******************************************************* 
// This file is automatically generated 
// Do not modify this file -- YOUR CHANGES WILL BE ERASED! 
// ******************************************************* 
export const deprecate: () => void;

export class HtmlDirective {
    
    constructor($element: JQuery);
    $postLink(): void;
}





export * from './system/systemModule';

export class SystemModule {
}




/**
 * @ngdoc service
 * @name smarteditServicesModule.service:ComponentHandlerService
 *
 * @description
 * Handles all get/set component related operations
 */
export class ComponentHandlerService {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @deprecated since 6.7 - use PageInfoService
     */
    getPageUID(): angular.IPromise<string>;
    /**
     * @deprecated since 6.7 - use PageInfoService
     */
    getPageUUID(): angular.IPromise<string>;
    /**
     * @deprecated since 6.7 - use PageInfoService
     */
    getCatalogVersionUUIDFromPage(): angular.IPromise<string>;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getFromSelector
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Wrapper around yjQuery selector
     *
     * @param {String | HTMLElement | JQuery} selector selector as per yjQuery API or HTMLElement
     *
     * @return {JQuery} a yjQuery object for the given selector
     *
     * @deprecated since 6.7 - use yJquery service instead
     */
    getFromSelector(selector: string | HTMLElement | JQuery): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getOverlay
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves a handler on the smartEdit overlay div
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @return {JQuery} The #smarteditoverlay JQuery Element
     */
    getOverlay(): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#isOverlayOn
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * determines whether the overlay is visible
     * This method can only be invoked from the smartEdit application and not the smartEdit iframe.
     *
     * @return {boolean} true if the overlay is visible
     */
    isOverlayOn(): boolean;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getComponentUnderSlot
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the yjQuery wrapper around a smartEdit component identified by its smartEdit id, smartEdit type and an optional class
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @param {String} smarteditComponentId the component id as per the smartEdit contract with the storefront
     * @param {String} smarteditComponentType the component type as per the smartEdit contract with the storefront
     * @param {String} smarteditSlotId the slot id of the slot containing the component as per the smartEdit contract with the storefront
     * @param {String =} cssClass the css Class to further restrict the search on. This parameter is optional.
     *
     * @return {JQuery} a yjQuery object wrapping the searched component
     */
    getComponentUnderSlot(smarteditComponentId: string, smarteditComponentType: string, smarteditSlotId: string, cssClass?: string): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getComponent
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the yjQuery wrapper around a smartEdit component identified by its smartEdit id, smartEdit type and an optional class
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @param {String} smarteditComponentId the component id as per the smartEdit contract with the storefront
     * @param {String} smarteditComponentType the component type as per the smartEdit contract with the storefront
     * @param {String =} cssClass the css Class to further restrict the search on. This parameter is optional.
     *
     * @return {JQuery} a yjQuery object wrapping the searched component
     */
    getComponent(smarteditComponentId: string, smarteditComponentType: string, cssClass?: string): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getOriginalComponentWithinSlot
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the yjQuery wrapper around a smartEdit component of the original storefront layer identified by its smartEdit id, smartEdit type and slot ID
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @param {String} smarteditComponentId the component id as per the smartEdit contract with the storefront
     * @param {String} smarteditComponentType the component type as per the smartEdit contract with the storefront
     * @param {String} slotId the ID of the slot within which the component resides
     *
     * @return {JQuery} a yjQuery object wrapping the searched component
     */
    getOriginalComponentWithinSlot(smarteditComponentId: string, smarteditComponentType: string, slotId: string): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getOriginalComponent
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the yjQuery wrapper around a smartEdit component of the original storefront layer identified by its smartEdit id, smartEdit type
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @param {String} smarteditComponentId the component id as per the smartEdit contract with the storefront
     * @param {String} smarteditComponentType the component type as per the smartEdit contract with the storefront
     *
     * @return {JQuery} a yjQuery object wrapping the searched component
     */
    getOriginalComponent(smarteditComponentId: string, smarteditComponentType: string): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getOverlayComponentWithinSlot
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the yjQuery wrapper around a smartEdit component of the overlay layer identified by its smartEdit id, smartEdit type and slot ID
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @param {String} smarteditComponentId the component id as per the smartEdit contract with the storefront
     * @param {String} smarteditComponentType the component type as per the smartEdit contract with the storefront
     * @param {String} slotId the ID of the slot within which the component resides
     *
     * @return {JQuery} a yjQuery object wrapping the searched component
     */
    getOverlayComponentWithinSlot(smarteditComponentId: string, smarteditComponentType: string, slotId: string): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getOverlayComponent
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the yjQuery wrapper around the smartEdit component of the overlay layer corresponding to the storefront layer component passed as argument
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @param {Object} originalComponent the DOM element in the storefront layer
     *
     * @return {JQuery} a yjQuery object wrapping the searched component
     */
    getOverlayComponent(originalComponent: JQuery): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getComponentInOverlay
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the yjQuery wrapper around a smartEdit component of the overlay div identified by its smartEdit id, smartEdit type
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @param {String} smarteditComponentId the component id as per the smartEdit contract with the storefront
     * @param {String} smarteditComponentType the component type as per the smartEdit contract with the storefront
     *
     * @return {JQuery} a yjQuery object wrapping the searched component
     *
     * @deprecated since 6.5, use {@link smarteditServicesModule.componentHandlerService#methodsOf_getOverlayComponentWithinSlot getOverlayComponentWithinSlot} or {@link smarteditServicesModule.componentHandlerService#methodsOf_getOverlayComponent getOverlayComponent}
     */
    getComponentInOverlay(smarteditComponentId: string, smarteditComponentType: string): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getParentSlotForComponent
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the the slot ID for a given element
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to search the parent
     *
     * @return {String} the slot ID for that particular component
     */
    getParentSlotForComponent(component: HTMLElement | JQuery): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getComponentPositionInSlot
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the position of a component within a slot
     *
     * @param {String} slotId the slot id as per the smartEdit contract with the storefront
     * @param {String} componentId the component id as per the smartEdit contract with the storefront
     *
     * @return {number} the position of the component within a slot
     */
    getComponentPositionInSlot(slotId: string, componentId: string): number;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getOriginalComponentsWithinSlot
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the yjQuery wrapper around a list of smartEdit components contained in the slot identified by the given slotId.
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @param {String} slotId the ID of the slot within which the component resides
     *
     * @return {Array<JQuery>} The list of searched components yjQuery objects
     */
    getOriginalComponentsWithinSlot(slotId: string): JQuery[];
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getSlotOperationRelatedId
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Gets the id that is relevant to be able to perform slot related operations for this components
     * It typically is {@link seConstantsModule.CONTAINER_ID_ATTRIBUTE} when applicable and defaults to {@link seConstantsModule.ID_ATTRIBUTE}
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to get the id
     *
     * @return {String} the slot operations related id
     */
    getSlotOperationRelatedId(component: HTMLElement | JQuery): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getSlotOperationRelatedUuid
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Gets the id that is relevant to be able to perform slot related operations for this components
     * It typically is {@link seConstantsModule.CONTAINER_ID_ATTRIBUTE} when applicable and defaults to {@link seConstantsModule.ID_ATTRIBUTE}
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to get the Uuid
     *
     * @return {String} the slot operations related Uuid
     */
    getSlotOperationRelatedUuid(component: HTMLElement | JQuery): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getParent
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the direct smartEdit component parent of a given component.
     * The parent is fetched in the same layer (original storefront or smartEdit overlay) as the child
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to search a parent
     *
     * @return {JQuery} a yjQuery object wrapping the smae-layer parent component
     */
    getParent(component: HTMLElement | JQuery): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getClosestSmartEditComponent
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Returns the closest parent (or self) being a smartEdit component
     *
     * @param {HTMLElement | JQuery} component the DOM/yjQuery element for which to search a parent
     *
     * @return {JQuery} The closest closest parent (or self) being a smartEdit component
     */
    getClosestSmartEditComponent(component: HTMLElement | JQuery): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#isSmartEditComponent
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Determines whether a DOM/yjQuery element is a smartEdit component
     *
     * @param {HTMLElement | JQuery} component the DOM/yjQuery element for which to check if it's a SmartEdit component
     *
     * @return {boolean} true if DOM/yjQuery element is a smartEdit component
     */
    isSmartEditComponent(component: HTMLElement | JQuery): boolean;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#setId
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Sets the smartEdit component id of a given component
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to set the id
     * @param {String} id the id to be set
     *
     * @return {JQuery} component the yjQuery component
     */
    setId(component: HTMLElement | JQuery, id: string): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getId
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Gets the smartEdit component id of a given component
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to get the id
     *
     * @return {String} the component id
     */
    getId(component: HTMLElement | JQuery): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getUuid
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Gets the smartEdit component id of a given component
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to get the id
     *
     * @return {String} the component id
     */
    getUuid(component: HTMLElement | JQuery): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getCatalogVersionUuid
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Gets the smartEdit component id of a given component
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to get the id
     *
     * @return {String} the component id
     */
    getCatalogVersionUuid(component: HTMLElement | JQuery): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#setType
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Sets the smartEdit component type of a given component
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to set the type
     * @param {String} type the type to be set
     *
     * @return {JQuery} component the yjQuery component
     */
    setType(component: HTMLElement | JQuery, type: string): JQuery;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getType
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Gets the smartEdit component type of a given component
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to get the type
     *
     * @return {String} the component type
     */
    getType(component: HTMLElement | JQuery): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getSlotOperationRelatedType
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Gets the type that is relevant to be able to perform slot related operations for this components
     * It typically is {@link seConstantsModule.CONTAINER_TYPE_ATTRIBUTE} when applicable and defaults to {@link seConstantsModule.TYPE_ATTRIBUTE}
     *
     * @param {HTMLElement | JQuery} component the yjQuery component for which to get the type
     *
     * @return {String} the slot operations related type
     */
    getSlotOperationRelatedType(component: HTMLElement | JQuery): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getAllComponentsSelector
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the DOM selector matching all smartEdit components that are not of type ContentSlot
     *
     * @return {String} components selector
     */
    getAllComponentsSelector(): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getAllSlotsSelector
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the DOM selector matching all smartEdit components that are of type ContentSlot
     *
     * @return {String} the slots selector
     */
    getAllSlotsSelector(): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getParentSlotUuidForComponent
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Retrieves the the slot Uuid for a given element
     *
     * @param {JQuery} the DOM element which represents the component
     *
     * @return {String} the slot Uuid for that particular component
     */
    getParentSlotUuidForComponent(component: JQuery): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#isExternalComponent
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Determines whether the component identified by the provided smarteditComponentId and smarteditComponentType
     * resides in a different catalog version to the one of the current page.
     *
     * @param {String} smarteditComponentId the component id as per the smartEdit contract with the storefront
     * @param {String} smarteditComponentType the component type as per the smartEdit contract with the storefront
     *
     * @return {Boolean} flag that evaluates to true if the component resides in a catalog version different to
     * the one of the current page.  False otherwise.
     */
    isExternalComponent(smarteditComponentId: string, smarteditComponentType: string): boolean;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getBodyClassAttributeByRegEx
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @param {RegExp} pattern Pattern of class names to search for
     *
     * @return {String} Class attributes from the body element of the storefront
     */
    getBodyClassAttributeByRegEx(pattern: RegExp): string;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getFirstSmartEditComponentChildren
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * This method can only be invoked from the smartEdit application and not the smartEdit container.
     * Get first level smartEdit component children for a given node, regardless how deep they are found.
     * The returned children may have different depths relatively to the parent:
     * Example: a call on the body would return 4 components with ids: 1,2,3,4
     * <pre>
     * 	<body>
     * 		<div>
     * 			<component smartedit-component-id="1">
     * 				<component smartedit-component-id="1_1"></component>
     * 			</component>
     * 			<component smartedit-component-id="2">
     * 				<component smartedit-component-id="2_1"></component>
     * 			</component>
     * 		</div>
     * 		<component smartedit-component-id="3">
     * 			<component smartedit-component-id="3_1"></component>
     * 		</component>
     * 		<div>
     * 			<div>
     * 				<component smartedit-component-id="4">
     * 					<component smartedit-component-id="4_1"></component>
     * 				</component>
     * 			</div>
     * 		</div>
     * 	</body>
     * </pre>
     *
     * @param {HTMLElement | JQuery} node any HTML/yjQuery Element
     *
     * @return {Array<JQuery>} The list of first level smartEdit component children for a given node, regardless how deep they are found.
     */
    getFirstSmartEditComponentChildren(htmlElement: HTMLElement | JQuery): JQuery[];
    /**
     * @ngdoc method
     * @name smarteditServicesModule.service:ComponentHandlerService#getComponentCloneInOverlay
     * @methodOf smarteditServicesModule.service:ComponentHandlerService
     *
     * @description
     * Get component clone in overlay
     *
     * @param {JQuery} the DOM element which represents the component
     *
     * @return {JQuery} The component clone in overlay
     */
    getComponentCloneInOverlay(component: JQuery): JQuery;
    
    
}




/**
 * @ngdoc service
 * @name smarteditServicesModule.ContextualMenuService
 *
 * @description
 * The ContextualMenuService is used to add contextual menu items for each component.
 *
 * To add items to the contextual menu, you must call the addItems method of the contextualMenuService and pass a map
 * of the component-type array of contextual menu items mapping. The component type names are the keys in the mapping.
 * The component name can be the full name of the component type, an ant-like wildcard (such as  *middle*Suffix), or a
 * valid regex that includes or excludes a set of component types.
 *
 */
export class ContextualMenuService {
    
    
    
    
    
    
    
    
    /**
     * @ngdoc method
     * @name smarteditServicesModule.ContextualMenuService#addItems
     * @methodOf smarteditServicesModule.ContextualMenuService
     *
     * @description
     * The method called to add contextual menu items to component types in the SmartEdit application.
     * The contextual menu items are then retrieved by the contextual menu decorator to wire the set of menu items to the specified component.
     *
     * Sample Usage:
     * <pre>
     * contextualMenuService.addItems({
     * '.*Component': [{
     *  key: 'itemKey',
     *  i18nKey: 'CONTEXTUAL_MENU',
     *  condition: function(componentType, componentId) {
     * 	return componentId === 'ComponentType';
     * 	},
     *  callback: function(componentType, componentId) {
     * 	alert('callback for ' + componentType + "_" + componentId);
     * 	},
     *  displayClass: 'democlass',
     *  iconIdle: '.../icons/icon.png',
     *  iconNonIdle: '.../icons/icon.png',
     * }]
     * });
     * </pre>
     *
     * @param {TypedMap<IContextualMenuButton[]>} contextualMenuItemsMap A map of componentType regular experessions to list of {@link IContextualMenuButton IContextualMenuButton} contextual menu items
     *
     * The object contains a list that maps component types to arrays of {@link IContextualMenuButton IContextualMenuButton} contextual menu items. The mapping is a key-value pair.
     * The key is the name of the component type, for example, Simple Responsive Banner Component, and the value is an array of {@link IContextualMenuButton IContextualMenuButton} contextual menu items, like add, edit, localize, etc.
     */
    addItems(contextualMenuItemsMap: TypedMap<IContextualMenuButton[]>): void;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.ContextualMenuService#removeItemByKey
     * @methodOf smarteditServicesModule.ContextualMenuService
     *
     * @description
     * This method removes the menu items identified by the provided key.
     *
     * @param {String} itemKey The key that identifies the menu items to remove.
     */
    removeItemByKey(itemKey: string): void;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.ContextualMenuService#getContextualMenuByType
     * @methodOf smarteditServicesModule.ContextualMenuService
     *
     * @description
     * Will return an array of contextual menu items for a specific component type.
     * For each key in the contextual menus' object, the method converts each component type into a valid regex using the regExpFactory of the function module and then compares it with the input componentType and, if matched, will add it to an array and returns the array.
     *
     * @param {String} componentType The type code of the selected component
     *
     * @returns {Array} An array of contextual menu items assigned to the type.
     *
     */
    getContextualMenuByType(componentType: string): IContextualMenuButton[];
    /**
     * @ngdoc method
     * @name smarteditServicesModule.ContextualMenuService#getContextualMenuItems
     * @methodOf smarteditServicesModule.ContextualMenuService
     *
     * @description
     * Will return an object that contains a list of contextual menu items that are visible and those that are to be added to the More... options.
     *
     * For each component and display limit size, two arrays are generated.
     * One array contains the menu items that can be displayed and the other array contains the menu items that are available under the more menu items action.
     *
     * @param {IContextualMenuConfiguration} configuration the {@link IContextualMenuConfiguration IContextualMenuConfiguration}
     * @returns {Promise} A promise that resolves to an array of contextual menu items assigned to the component type.
     *
     * The returned object contains the following properties
     * - leftMenuItems : An array of menu items that can be displayed on the component.
     * - moreMenuItems : An array of menu items that are available under the more menu items action.
     *
     */
    getContextualMenuItems(configuration: IContextualMenuConfiguration): angular.IPromise<ContextualMenu>;
    /**
     * @ngdoc method
     * @name smarteditServicesModule.ContextualMenuService#refreshMenuItems
     * @methodOf smarteditServicesModule.ContextualMenuService
     *
     * @description
     * This method can be used to ask SmartEdit to retrieve again the list of items in the enabled contextual menus.
     */
    refreshMenuItems(): void;
    
    
    
    
}









export * from './CatalogServiceInner';
export * from './ComponentHandlerService';
export * from './ContextualMenu';
export * from './ContextualMenuService';
export * from './DelegateRestServiceInner';
export * from './ExperienceServiceInner';
export * from './FeatureServiceInner';
export * from './NotificationServiceInner';
export * from './NotificationMouseLeaveDetectionServiceInner';
export * from './DragAndDropCrossOriginInner';
export * from './PageInfoServiceInner';
export * from './PerspectiveServiceInner';
export * from './PreviewServiceInner';
export * from './RestService';
export * from './RestServiceFactory';
export * from './SessionServiceInner';
export * from './SharedDataServiceInner';
export * from './StorageServiceInner';
export * from './UrlServiceInner';
export * from './WaitDialogServiceInner';
export * from './SeNamespaceService';
export * from './PermissionServiceInner';
export * from './SmarteditServicesModule';







/// <reference types="angular-mocks" />


export class PermissionService extends IPermissionService {
    
    constructor($log: angular.ILogService);
    _remoteCallRuleVerify(ruleKey: string, permissionNameObjs: PermissionContext[]): angular.IPromise<boolean>;
}





















/**
 * @ngdoc overview
 * @name smarteditServicesModule
 *
 * @description
 * Module containing all the services shared within the smartedit application
 */
export class SmarteditServicesModule {
}





export class StorageModule {
}











export class Smartedit {
}

}